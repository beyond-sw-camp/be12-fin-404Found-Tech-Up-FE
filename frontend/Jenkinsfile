// Ï†ÑÏó≠ Î≥ÄÏàò ÏÑ†Ïñ∏
// JenkinsÏóêÏÑúÎäî pipeline Î∏îÎ°ù Î∞îÍπ•Ïóê ÏÑ†Ïñ∏Ìï¥Ïïº Ï†ÑÏó≠ÏúºÎ°ú ÏÇ¨Ïö© Í∞ÄÎä•
def deployColor = ""
def otherColor = ""
def startTime = 0

def sendDiscordMessage(String title, String description, String color) {
    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
        discordSend(
            description: description,
            footer: "Jenkins CI/CD",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            title: title,
            color: color,
            webhookURL: "$DISCORD"
        )
    }
}

pipeline {
    agent any

    options {
        timestamps()
    }

    environment {
        IMAGE_NAME = 'mstar228/techup-frontend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        PATH = "/usr/local/bin:${env.PATH}"
        // FRONTEND_URL = credentials('FRONTEND_URL')
        BACKEND_URL = credentials('BACKEND_URL')
        // EC2_HOST = 'ubuntu@'+FRONTEND_URL
        EC2_HOST = 'ubuntu@www.techup.kro.kr'
    }

    stages {
        stage('Start Timer') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
            }
        }

        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/beyond-sw-camp/be12-fin-404Found-Tech-Up-FE.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }

        stage('Build Frontend') {
            steps {
                echo "Building Frontend"
                sh '''
                    cd ${WORKSPACE}/frontend
                    npm install
                    npm run build
                    sed -i 's|\${BACKEND_URL}|${BACKEND_URL}|' ${WORKSPACE}/frontend/nginx/default.conf
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/frontend")
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push('latest')
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            // when {
            //     expression { env.GIT_BRANCH == 'origin/main' }
            // }
            steps {
                script {
                    echo "MODIFY DOCKER-COMPOSE.YML"
                    sh """
                        sed -i 's|mstar228/techup-frontend:latest|mstar228/techup-frontend:${IMAGE_TAG}|' ${WORKSPACE}/frontend/docker-compose.yml
                    """

                    echo "SCP DOCKER-COMPOSE.YML"
                    // withCredentials([string(credentialsId: 'FRONTEND_URL', variable: 'FRONTEND_URL')]) {
                    //     def EC2_HOST = "ubuntu@${FRONTEND_URL}"
                    //     echo "SCP DOCKER-COMPOSE.YML"
                    //     echo "EC2_HOST: ${EC2_HOST}"
                    //     sh """
                    //         ssh -o StrictHostKeyChecking=no "${EC2_HOST}" "[ -f /home/ubuntu/docker-compose.yml ] && echo 'File exists, overwriting' || echo 'File does not exist'"
                    //         scp -o StrictHostKeyChecking=no ${WORKSPACE}/frontend/docker-compose.yml "${EC2_HOST}":/home/ubuntu/docker-compose.yml
                    //     """

                    //     echo "RUN DOCKER-COMPOSE"
                    //     sh """
                    //         ssh -o StrictHostKeyChecking=no "${EC2_HOST}" <<'EOF'
                    //         docker-compose -f /home/ubuntu/docker-compose.yml down  # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Î∞è ÏÇ≠Ï†ú
                    //         docker-compose -f /home/ubuntu/docker-compose.yml up -d  # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
                    //     """
                    // }
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} "[ -f /home/ubuntu/docker-compose.yml ] && echo 'File exists, overwriting' || echo 'File does not exist'"
                        scp -o StrictHostKeyChecking=no ${WORKSPACE}/frontend/docker-compose.yml ${EC2_HOST}:/home/ubuntu/docker-compose.yml
                    """

                    echo "RUN DOCKER-COMPOSE"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} <<'EOF'
                        docker-compose -f /home/ubuntu/docker-compose.yml down  # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Î∞è ÏÇ≠Ï†ú
                        docker-compose -f /home/ubuntu/docker-compose.yml up -d  # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
                    """
                }
            }
        }

        stage('End Timer') {
            steps {
                script {
                    def endTime = System.currentTimeMillis()
                    def duration = (endTime - startTime) / 1000
                    echo "‚è±Ô∏è Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à"
                }
            }
        }
    }

    post {
        success {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("üéâ Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ ÏÑ±Í≥µ!", "‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à", "GREEN")
            }
        }
        failure {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("üö® Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìå®!", "‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à", "RED")
            }
        }
    }
}
